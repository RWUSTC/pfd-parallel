version="v0.0.1";
category="Algebraic geometry";
info="demo";

proc pfd_singular_filename (string matrixname, string suffix, int row, int col)
{
  string filename = pfd_singular_filename_no_suffix (matrixname, row, col)
                    + "." + suffix;
  return (filename);
}

proc pfd_singular_filename_no_suffix (string matrixname, int row, int col)
{
  string filename = matrixname
                  + "_" + string(row)
                  + "_" + string(col);
  return (filename);
}


proc pfd_singular_compute (in_struct input)
{
  string filename = pfd_singular_filename( input.matrixname
                                         , input.suffix
                                         , input.row
                                         , input.col);
  if (input.suffix == "txt") {
    execute("ring r = " + input.neededring + ";");
  }
  if ((input.pfdimplementation == "lein") ||
      (input.pfdimplementation == "MultivariateApart_kl")) {
    pfdSingleEntry( filename
                  , input.inputdir
                  , input.outputdir
                  , input.pfdimplementation
                  );
  } else {
    ERROR ("invalid pfdimplementation");
  }

  out_struct output;
  output.result = "success! (serially)";
  return(output);
}

proc pfd_singular_general_prepare( in_struct input
                                 , int id
                                 , string tempdir
                                 , string terms_name
                                 , string output_format
                                 )
{
  if (pfd_singular_is_already_computed(input)) {
    return(1);
  }

  pfd_singular_prepareSingleEntryFraction(input);

  def triv = pfd_singular_is_trivial(input, output_format);
  if (typeof(triv) == "out_struct") {
    return (2);
  }

  pfd_singular_prepare_input(input, id, tempdir, terms_name);

  return (0);
}

proc pfd_singular_is_already_computed (in_struct input)
{
  string filename = pfd_singular_filename_no_suffix( input.matrixname
                                               , input.row
                                               , input.col);

  list args = parsePfdSingleEntryArgs(input.inputdir, input.outputdir);
  string from_dir = args[1];
  string to_dir = args[2];

  if (file_exists(to_dir + "result_" + filename + ".ssi")) {
    return(1);
  } else {
    return(0);
  }
}

proc pfd_singular_prepareSingleEntryFraction (in_struct input)
{
  list args = parsePfdSingleEntryArgs(input.inputdir, input.outputdir);
  string from_dir = args[1];
  string to_dir = args[2];
  string implementation = args[3]; // not important, as we are obviously parallel

  if (input.suffix == "txt") {
    execute("ring r = " + input.neededring);
  }
  string filename = pfd_singular_filename_no_suffix( input.matrixname
                                                   , input.row
                                                   , input.col);
  prepareSingleEntryFraction( filename
                            , from_dir
                            );
  if (!file_exists( from_dir + filename + ".ssi")) {
    ERROR("Preparation of ssi failed for " + from_dir + filename + ".ssi");
  }
}


proc pfd_singular_is_trivial (in_struct input, string output_format)
{
  system("--ticks-per-sec",1000);
  short = 0;

  list args = parsePfdSingleEntryArgs( input.inputdir
                                     , input.outputdir
                                     , input.pfdimplementation
                                     );
  string from_dir = args[1];
  string to_dir = args[2];
  string approach = args[3];
  int ignore_nonlin = args[4];

  string filename = pfd_singular_filename_no_suffix( input.matrixname
                                               , input.row
                                               , input.col);
  list fraction = read("ssi:r " + from_dir + filename + ".ssi");
  if (size(fraction[2]) > 1) {
    // We assume ssi files to be properly merged, in which case trivial problems
    // will always have a single summand.
    return (0); // 0 = false => nontrivial
  }
  list nonlin = prepareNonLin(fraction, ignore_nonlin);
  fraction = nonlin[1];
  nonlin = nonlin[2];

  int t = rtimer;
  ideal q = fraction[1];

  poly f = fraction[2][1][1];
  list g = list(q[fraction[2][1][2]], fraction[2][1][3]);

  int debug=0;
  //link l=":a "+string(debug)+"_log_"+datetime()+".txt";
  link l=":w ";

  if(debug)
  {
    fprintf(l,"debug: %s", debug);
    fprintf(l,"size(string(f)) = %s, size(string(g)) = %s %n",
               size(string(f)), size(string(g)), 0);
  }

  if (size(g[1]) == 0) {
    list dec = list(fraction[1],list(list(f,intvec(0:0),intvec(0:0))));
    if(debug)
      {fprintf(l,"%ntotal: 0 ms (denominator was constant)",0); close(l);}
    if(voice<=printlevel) {displaypfd(dec);}
    //return(dec);
  }

  if(f==0) {
    // trivial case
    list dec = list(fraction[1],list(list(poly(0),intvec(0:0),intvec(0:0))));
    if(debug)
      {fprintf(l,"%ntotal: 0 ms (numerator was 0)",0); close(l);}
    if(voice<=printlevel) {displaypfd(dec);}
    //return(dec);
  }
  if (!defined(dec)) {
    return (0); // 0 = false => nontrivial
  } else {
    // dec is defined in one of the trivial cases.
    t = rtimer-t;

    list result = dec;

    write(":w "+to_dir+"resources_"+filename+".txt",
          sprintf("Time for Trivial: %s ms,  Memory: %s Bytes",t,memory(2)));

    // output as Singular objects
    if(ignore_nonlin) {
      result[3] = nonlin;
    }

    string indexed_pfd;
    string indexed_factors;

    // write ssi
    write("ssi:w "+to_dir+"result_"+filename+".ssi", result);

    /*
    // write as clear text
    if (find(output_format, "cleartext")) {
      write(":w " + to_dir + "result_" + filename + ".txt", pfd_as_txt(result));
    }
    if (find(output_format, "listnumden")) {
      write(":w " + to_dir + "result_" + filename + "_input.txt", pfd_as_txt_input(result));
    }

    // write denominator indexed
    if (find(output_format, "indexed_denom")) {
      indexed_pfd, indexed_factors = pfd_as_indexed_txt(result);
      write(":w "+to_dir+"result_indexed_denominator_"+filename+".txt", indexed_pfd);
      write(":w "+to_dir+"result_factors_denominator_"+filename+".txt", indexed_factors);
    }

    // write indexed
    if (find(output_format, "indexed_all")) {
      list factorized_numerators_result = factorize_numerators(result);
      indexed_pfd, indexed_factors = pfd_as_indexed_txt(factorized_numerators_result);
      write(":w "+to_dir+"result_indexed_"+filename+".txt", indexed_pfd);
      write(":w "+to_dir+"result_factors_"+filename+".txt", indexed_factors);
    }
    */

    out_struct output;
    output.result = "success! (trivial problem)";
    return(output);
  }
}

proc pfd_singular_prepare_input( in_struct input
                               , int id
                               , string tempdir
                               , string terms_name
                               )
{
  system("--ticks-per-sec",1000);
  short = 0;

  list args = parsePfdSingleEntryArgs(input.inputdir, input.outputdir);
  string from_dir = args[1];
  string to_dir = args[2];
  string approach = args[3];
  int ignore_nonlin = args[4];

  string filename = pfd_singular_filename_no_suffix( input.matrixname
                                               , input.row
                                               , input.col);
  if (!file_exists( from_dir + filename + ".ssi")) {
    ERROR("No ssi file found for " + from_dir + filename + ".ssi");
  }
  list fraction = read("ssi:r " + from_dir + filename + ".ssi");
  list nonlin = prepareNonLin(fraction, ignore_nonlin);
  fraction = nonlin[1];
  nonlin = nonlin[2];


  ideal q = fraction[1];
  list terms = fraction[2];
  list prepared_input = list(q, ignore_nonlin, nonlin, filename, to_dir);

  write("ssi:w " + tempdir + "/input_" + string(id) + ".ssi", prepared_input);
  write("ssi:w " + tempdir + "/" + terms_name +"_" + string(id) + ".ssi",
        list(terms, list()));
}

proc get_loop_strat(string step) {
  if ((step == "NSSdecompStep") or (step == "algDependDecompStep")) {
    return ("size");
  } else{if ((step == "shortNumeratorDecompStep") or (step == "numeratorDecompStep")) {
    return ("index");
  } else {
    return ("invalid");
  }}

}

proc pfd_singular_compute_step ( int id
                               , string step
                               , string from_terms
                               , string to_terms
                               , string tempdir
                               )
{
  system("--ticks-per-sec",1000);
  short = 0;

  int debug=0;
  link l=":w ";

  list input = read("ssi:r " + tempdir + "/input_" + string(id) + ".ssi");
  list terms = read("ssi:r " + tempdir + "/"  + from_terms + "_" + string(id) + ".ssi");

  ideal q = input[1];
  string filename = input[4];
  string to_dir = input[5];

  int t = rtimer;

  list dec = generic_dec_loop(step, get_loop_strat(step), terms[1], q, debug, l);

  t = rtimer-t;
  write(":w "+tempdir+"/"+step+"_"+string(id)+".time",
        string(t));

  write("ssi:w " + tempdir + "/" + to_terms +"_" + string(id) + ".ssi", list(list(), dec));

}

proc pfd_singular_skip_step(string from_path, string to_path)
{
  list terms = read("ssi:r " + from_path);
  if ((size(terms) < 2) or size(terms) > 2) {
    ERROR("Expected 2 lists in terms file");
  }
  if (size(terms[1]) == 0) {
    ERROR("No terms to skip step");
  }
  if (size(terms[2]) > 0) {
    ERROR("There should be no decomposition steps when skipping");
  }
  write("ssi:w " + to_path, list(terms[2], terms[1]));
}

proc pfd_singular_hand_forward(string from_path, string to_path)
{
  list terms = read("ssi:r " + from_path);
  if ((size(terms) < 2) or size(terms) > 2) {
    ERROR("Expected 2 lists in terms file");
  }
  if (size(terms[1]) > 0) {
    ERROR("Unprocessed terms when handing forward");
  }
  if (size(terms[2]) == 0) {
    ERROR("No terms at all (not even decomposition terms)");
  }
  write("ssi:w " + to_path, list(terms[2], terms[1]));
}

proc pfd_singular_terms_left(string path)
{
  list terms = read("ssi:r " + path);

  return(size(terms[1]));
}

proc pfd_singular_write_result (int id, string tempdir, string output_format)
{
  system("--ticks-per-sec",1000);
  short = 0;

  int debug=0;
  link l=":w ";

  list input = read("ssi:r " + tempdir + "/input_" + string(id) + ".ssi");
  list terms = read("ssi:r " + tempdir + "/terms_4_" + string(id) + ".ssi");
  if (size(terms[1]) > 0) {
    ERROR("Unprocessed terms at time of writing");
  }
  terms = terms[2];

  ideal q = input[1];
  int ignore_nonlin = input[2];
  list nonlin = input[3];
  string filename = input[4];
  string to_dir = input[5];


  if(size(terms)==1) {if(terms[1][1]==0) {terms = list();}}
  list result = list();
  result[1] = q;
  result[2] = terms;

  if (ignore_nonlin) {
    result[3] = nonlin;
  }

  string indexed_pfd;
  string indexed_factors;

  //write ssi
  write("ssi:w "+to_dir+"result_"+filename+".ssi",result);

  // write as clear text
  if (find(output_format, "cleartext")) {
    write(":w " + to_dir + "result_" + filename + ".txt", pfd_as_txt(result));
  }
  if (find(output_format, "listnumden")) {
    write(":w " + to_dir + "result_" + filename + "_input.txt", pfd_as_txt_input(result));
  }

  // write denominator indexed
  if (find(output_format, "indexed_denom")) {
    indexed_pfd, indexed_factors = pfd_as_indexed_txt(result);
    write(":w "+to_dir+"result_indexed_denominator_"+filename+".txt", indexed_pfd);
    write(":w "+to_dir+"result_factors_denominator_"+filename+".txt", indexed_factors);
  }

  // write indexed
  if (find(output_format, "indexed_all")) {
    list factorized_numerators_result = factorize_numerators(result);
    indexed_pfd, indexed_factors = pfd_as_indexed_txt(factorized_numerators_result);
    write(":w "+to_dir+"result_indexed_"+filename+".txt", indexed_pfd);
    write(":w "+to_dir+"result_factors_"+filename+".txt", indexed_factors);
  }

  out_struct output;
  output.result = "success!";
  return(output);
}

proc pfd_split_terms(int id,
                     string in_filename,
                     string out_filename,
                     string tempdir,
                     int split_max)
{
  list terms_read = read("ssi:r " + tempdir + "/" + in_filename + "_" + string(id) + ".ssi");
  list terms = terms_read[1];
  list dec = terms_read[2];

  int term_count = size(terms);
  //int dec_count = size(dec);

  int split_count = min(split_max, term_count);

  if (split_count == 0) {
    ERROR("split_count should never be 0");
  }
  int i;

  list term_lists = list();
  for(i = 1; i <= split_count; i++) {
    term_lists[i] = list();
  }

  for(i = 0; i < term_count; i++) {
    term_lists[1 + i % split_count][1 + i div split_count] = terms[1 + i];
  }

  for(i = 0; i < split_count; i++) {
    write("ssi:w " + tempdir + "/" + out_filename + "_" +
              string(id) + "_" + string(i) + ".ssi",
          term_lists[i + 1]);
  }
  write("ssi:w " + tempdir + "/" + out_filename + "_dectemp_" +
              string(id) + ".ssi", dec);


  return (split_count);
}

proc pfd_fork_compute_term( int id
                          , int term_id
                          , string step
                          , string in_filename
                          , string out_filename
                          , string tempdir
                          , list #
                          )
{

  system("--ticks-per-sec",1000);
  short = 0;

  int debug=0;
  link l=":w ";
  list dec = list();

  list terms = read("ssi:r " + tempdir + "/" + in_filename + "_" +
          string(id) + "_" + string(term_id) + ".ssi");
  //list terms = terms_read[1];
  //list dec = terms_read[2];
  list input = read("ssi:r " + tempdir + "/input_" + string(id) + ".ssi");
  ideal q = input[1];

  if (size(terms) < 1) {
    ERROR("Expected at least one term, got " + string(size(terms)) +
          " instead.  Check for error in term split process.");
  }

  list result = generic_dec_loop(step, get_loop_strat(step), terms, q, debug, l);

  write("ssi:w " + tempdir +
                   "/" + out_filename + "_" +
                   string(id) + "_" + string(term_id) +
                   ".ssi", list(list(), result) );
}


proc pfd_fork_merge_pair( int id
                        , int left
                        , int right
                        , string filename
                        , string tempdir
                   )
{
  list leftl = read("ssi:r " + tempdir +
                              "/" + filename + "_result_" +
                              string(id) + "_" + string(left) +
                              ".ssi");
  list rightl = read("ssi:r " + tempdir +
                              "/" + filename + "_result_" +
                              string(id) + "_" + string(right) +
                              ".ssi");

  list terms = mergepfd_sorted(leftl[1], rightl[1]);
  list dec = mergepfd_sorted(leftl[2], rightl[2]);
  if (size(terms) == 0 && size(dec) == 0) {
    ERROR("no terms after merge, even though " +
          string(size(leftl[1]))  + ", " +
          string(size(rightl[1]))  + ", " +
          string(size(leftl[2]))  + ", " +
          string(size(rightl[2]))
          );

  }

  write( "ssi:w " + tempdir +
                    "/" + filename + "_result_" +
                    string(id) + "_" + string(left) +
                    ".ssi"
       , list(terms, dec));
}

proc pfd_merge_decs_and_write(string dec_tmp_file,
                              string result_file,
                              string to_file)
{
  list dec = read("ssi:r " + dec_tmp_file);
  list result = read("ssi:r " + result_file);
  dec = mergepfd_sorted(dec, result[2]);
  write("ssi:w " + to_file, list(result[1], dec));
}

proc pfd_singular_log_duration(int id,
                           bigint duration,
                           string measure_name,
                           string tempdir)
{
  list input = read("ssi:r " + tempdir + "/input_" + string(id) + ".ssi");
  string filename = input[4];
  string to_dir = input[5];
    write(":a "+to_dir+"resources_"+filename+".txt",
          sprintf(measure_name+" time: %s ms",duration));
}

proc mod_init() {
  // TODO: change to installed pfd library
  LIB "@PFD_SING_LIB_PATH@/pfd.lib";
}

