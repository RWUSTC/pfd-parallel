<defun name="pfd_serial_step_compute">

  <include-structs href="types.xpnet"/>

  <require key="worker" mandatory="true"/>
  <in name="in" type="task_status"/>
  <in name="step" type="string"/>
  <in name="options" type="options_type"/>
  <out name="out" type="task_status"/>

  <module name="singular_parallel_allpfd"
          require_function_unloads_without_rest="false"
          function="serial_step_compute
                      ( options
                      , in
                      , out
                      , step
                      )">
    <cinclude href="interface/singular_pnet-interface.hpp"/>
    <cinclude href="util-generic/dynamic_linking.hpp"/>
    <cinclude href="iostream"/>
    <code><![CDATA[
      /*<>*/

      auto active (singular_parallel::unwrap_map<std::string, int>
                                                (options.steps_active)); 

      if (active[step]) {
        std::cout << "Computing " + step +" " << in.id << "\n";
        RESOLVE_INTERFACE_FUNCTION
          (pfd_compute_step)
          (in.id, options, step);
        std::cout << step + " "  << in.id << " done!\n";

        out.id = in.id;
        out.status = 0;
      } else {
        std::cout << "Skipping " + step +" " << in.id << "\n";
        RESOLVE_INTERFACE_FUNCTION
          (pfd_skip_step)
          (in.id, options, step);
        out.id = in.id;
        out.status = 0;
      }

    ]]></code>
  </module>

</defun>

