<defun name="pfd_compute">

  <include-structs href="types.xpnet"/>

  <require key="worker" mandatory="true"/>

  <in name="in" type="task_type" place="intask"/>
  <in name="config" type="config_type" place="readconfig"/>
  <in name="options" type="option_type"place="readoptions"/>
  <out name="out" type="task_type" place="out"/>

  <net>
    <place name="intask" type="task_type"/>
    <place name="readconfig" type="config_type"/>
    <place name="readoptions" type="option_type"/>
    <place name="out" type="task_type"/>

    <transition name="compute">
      <defun>
        <require key="worker" mandatory="true"/>
        <in name="in" type="task_type"/>
        <in name="config" type="config_type"/>
        <in name="options" type="option_type"/>
        <out name="out" type="task_type"/>

        <module name="singular_parallel_allpfd"
                require_function_unloads_without_rest="false"
                function="compute
                            ( config
                            , options
                            , in
                            , out
                            )">
          <cinclude href="interface/singular_pnet-interface.hpp"/>
          <cinclude href="util-generic/dynamic_linking.hpp"/>
          <cinclude href="iostream"/>
          <code><![CDATA[
            std::cout << "pfd computation " << in.id << " starting\n";

            RESOLVE_INTERFACE_FUNCTION (pfd_parallel_compute)
              ( config.base_filename, in.id, options );
            out = in;

            std::cout << "pfd computation " << in.id << " done\n";
          ]]></code>
        </module>
      </defun>
      <connect-in port="in" place="intask"/>
      <connect-read port="config" place="readconfig"/>
      <connect-read port="options" place="readoptions"/>
      <connect-out port="out" place="out"/>
    </transition>
  </net>
</defun>

